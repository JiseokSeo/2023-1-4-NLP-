{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JiseokSeo/-I-studied-/blob/main/selenium_naver_shopping_cawlering\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aad7879b",
      "metadata": {
        "id": "aad7879b"
      },
      "outputs": [],
      "source": [
        "# !pip install selenium\n",
        "# !pip install BeautifulSoup4\n",
        "# !pip install chromedriver-autoinstaller"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "659b4cfd",
      "metadata": {
        "id": "659b4cfd"
      },
      "outputs": [],
      "source": [
        "from selenium import webdriver\n",
        "import chromedriver_autoinstaller\n",
        "import time\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from selenium.webdriver.common.keys import Keys\n",
        "from selenium.webdriver.common.by import By\n",
        "from bs4 import BeautifulSoup\n",
        "import requests\n",
        "import re\n",
        "\n",
        "pd.options.display.max_columns = None\n",
        "pd.options.display.max_rows = 355\n",
        "\n",
        "chrome_ver = chromedriver_autoinstaller.get_chrome_version().split('.')[0]\n",
        "chrome_ver"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5280e8bc",
      "metadata": {
        "id": "5280e8bc"
      },
      "outputs": [],
      "source": [
        "try:\n",
        "    crawler = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe')\n",
        "except:\n",
        "    crawler = chromedriver_autoinstaller.install(True)\n",
        "    crawler = webdriver.Chrome(f'./{chrome_ver}/chromedriver.exe')\n",
        "crawler.implicitly_wait(10)\n",
        "crawler.get('https://search.shopping.naver.com/search/category/100002361?catId=50000023&origQuery&pagingIndex=1&pagingSize=40&productSet=total&query&sort=rel&timestamp=&viewType=list')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d034c7f3",
      "metadata": {
        "id": "d034c7f3"
      },
      "outputs": [],
      "source": [
        "cat1 = crawler.find_element('xpath', '//*[@id=\"__next\"]/div/div[2]/div/div[2]/div[1]/div[1]/div[2]/div/h4/a/span[1]').text\n",
        "cat2 = crawler.find_element('xpath', '//*[@id=\"__next\"]/div/div[2]/div/div[2]/div[1]/div[1]/div[2]/div/h4/a/span[2]').text\n",
        "cat3 = crawler.find_element('xpath', '//*[@id=\"__next\"]/div/div[2]/div/div[2]/div[1]/div[1]/div[2]/div/h4/a/span[3]').text\n",
        "cat1, cat2, cat3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3cbf0810",
      "metadata": {
        "id": "3cbf0810"
      },
      "outputs": [],
      "source": [
        "cat_list = [f'//*[@id=\"__next\"]/div/div[2]/div/div[2]/div[1]/div[1]/div[2]/div/ul/li[{i}]/a/span' for i in range(1, int(cat3)+1)]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e8e3f2cf",
      "metadata": {
        "scrolled": true,
        "id": "e8e3f2cf"
      },
      "outputs": [],
      "source": [
        "data = []\n",
        "\n",
        "for cat in cat_list:\n",
        "    crawler.get('https://search.shopping.naver.com/search/category/100002361?catId=50000023&origQuery&pagingIndex=1&pagingSize=80&productSet=total&query&sort=rel&timestamp=&viewType=list')\n",
        "    time.sleep(2)\n",
        "    \n",
        "    crawler.find_element('xpath', cat).click()\n",
        "    cat_now = crawler.find_element('xpath', cat).text\n",
        "    time.sleep(2)\n",
        "    \n",
        "    url = crawler.current_url\n",
        "    cat_code = re.findall('/[0-9]{9}', url)[0][1:]\n",
        "    cat_id = re.findall('=[0-9]{8}', url)[0][1:]\n",
        "\n",
        "    for i in range(1, 2):\n",
        "        crawler.get(f'https://search.shopping.naver.com/search/category/{cat_code}?catId={cat_id}&origQuery&pagingIndex={i}&pagingSize=80&productSet=total&query&sort=rel&timestamp=&viewType=list')\n",
        "        print(f'now {cat_now}:{i} page')\n",
        "        \n",
        "        while True:\n",
        "            bh = crawler.execute_script('return document.body.scrollHeight')\n",
        "            time.sleep(3)\n",
        "\n",
        "            crawler.execute_script('window.scrollTo(0, document.body.scrollHeight)')\n",
        "            time.sleep(3)\n",
        "\n",
        "            ah = crawler.execute_script('return document.body.scrollHeight')\n",
        "\n",
        "            if ah == bh:\n",
        "                break\n",
        "\n",
        "            bh = ah\n",
        "            \n",
        "        infos = crawler.find_elements(By.CSS_SELECTOR, '.basicList_info_area__TWvzp')\n",
        "        for info in infos:\n",
        "            try:\n",
        "                is_ad = info.find_element(By.CSS_SELECTOR, '.basicList_price_area__K7DDT > button')\n",
        "                print('광고 회피')\n",
        "            except:\n",
        "                name = info.find_element(By.CSS_SELECTOR, '.basicList_title__VfX3c > a').text\n",
        "                price = info.find_element(By.CSS_SELECTOR, 'div.basicList_info_area__TWvzp > div.basicList_price_area__K7DDT > strong > span > span.price_num__S2p_v').text\n",
        "                data.append([name, cat2, cat_now, price])\n",
        "                print(name, price)\n",
        "        print(f'size of df: {len(data)}\\n')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b418d020",
      "metadata": {
        "id": "b418d020"
      },
      "outputs": [],
      "source": [
        "df = pd.DataFrame(columns=['title', 'cat1', 'cat2', 'price'], data=data)\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "20964d04",
      "metadata": {
        "id": "20964d04"
      },
      "outputs": [],
      "source": [
        "len(data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d53cb73b",
      "metadata": {
        "id": "d53cb73b"
      },
      "outputs": [],
      "source": [
        "df.to_csv(f'{cat1}_{cat2}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fde3c8a0",
      "metadata": {
        "id": "fde3c8a0"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}